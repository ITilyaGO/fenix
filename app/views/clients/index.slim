- if @broken
  div class="alert alert-warning" role="alert"
    p Этим клиентам не прописан город. Назначьте его вручную, потому что клиенты без города могут вызывать ошибки.

- if @noname
  .alert.alert-warning role="alert"
    p Клиенты без имени

ul class="nav nav-tabs"
  li class="active" = link_to tag_icon(:list, 'Список'), url(:clients, :index)
  li = link_to tag_icon(:list, 'без города'), url(:clients, :broken)
  li = link_to tag_icon(:list, 'без имени'), url(:clients, :noname)
  li = link_to tag_icon(:briefcase, 'без менеджера'), url(:clients, :index, manager: 0)
  li = link_to tag_icon(:plus, 'Создать'), url(:clients, :new)
  li.pull-right = link_to tag_icon(:'file-excel-o', 'экспорт'), url(:clients, :export, :win => '')
  - if allow_route?(:kyoto)
    li.pull-right = link_to tag_icon(:file, 'миграция'), url(:kyoto, :table, :id => 4)

  .clearfix

.nav.nav-search
  .col-md-1
    = tag_icon(:search, 'поиск')
  .col-md-5
    = link_to '', '', :id => 'place_link', :style => 'display: none'
    = text_field_tag 'ci', :class => 'form-control', :style => 'width:400px', :id => 'typeahead-place', :name => 'typeahead-place', :placeholder => 'город'
  .col-md-5
    = link_to '', '', :id => 'client_link', :target => '_blank', :style => 'display: none'
    = text_field_tag 'cl', :class => 'form-control', :style => 'width:400px', :id => 'typeahead-client', :placeholder => 'клиент'

div class="tabs-content"
  table class="table table-hover table-condensed" id="list"
    thead
      tr
        th class='header list-menu'
          div class='dropdown'
            a href='#' class='list-menu-toggle.dropdown-toggle dropdown-toggle' data-toggle='dropdown'
              = tag_icon :magic
            ul class='list-menu dropdown-menu' role='dropdown'
              li class='list-menu-wrapper' = link_to tag_icon(:check, pat(:select_all)), '#', :id => 'select-all', :class => 'list-menu-link'
              li class='list-menu-wrapper list-menu-wrapper-disabled' = link_to tag_icon('check-empty', pat(:deselect_all)), '#', :id => 'deselect-all', :class => 'list-menu-link list-menu-link-disabled'
              li class='list-menu-divider divider'
              li class='list-menu-wrapper list-menu-wrapper-disabled'
                = link_to tag_icon(:trash, pat(:delete_selected)), '#', :id => 'delete-selected', :class => 'list-menu-link list-menu-link-disabled'
                div class='list-menu-popover-delete-selected popover right'
                  div class='arrow'
                  h3 class='popover-title' = pat(:delete_selected_title)
                  div class='popover-content'
                    = form_tag url(:clients, :destroy_many), :method => :delete do
                      = hidden_field_tag :client_ids, :'data-delete-many-ids' => true
                      = submit_tag  pat(:delete), :class =>'list-menu-popover-delete-selected-btn btn btn-danger btn-small'
                      div class='btn btn-default btn-small cancel' = pat(:cancel)
        th class='header' = mat(:client, :id)
        th class='header' = mat(:client, :name)
        th class='header' Город
        th class='header' Город доставки
        th class='header' Тр.ком
        th.header Менеджер
        th class='header'
        th class='header list-row-action-header'

    tbody
      - @clients.each do |client|
        tr class='list-row'
          td class='list-column list-selectable' = check_box_tag 'client_ids[]', :value => client.id, :class => 'list-selectable-checkbox'
          td class='list-column' = client.id
          td class='list-column' = client.name
          td class='list-column'
            - code = @kc_clients[client.id.to_s]
            - town_name = @kc_towns[code]&.model
            = partial 'bricks/kato/label', :locals => { town_name: town_name, el: client }
          td class='list-column'
            - code = @kc_delivery[client.id.to_s]
            - town_name = @kc_towns[code]&.model
            = partial 'bricks/kato/label', :locals => { town_name: town_name, el: nil }
          td class='list-column'
            = partial 'bricks/orders/transport', :locals => { client_id: client.id }
          td.list-column
            = client.manager&.name
            - unless client.manager_id
              .fa.fa-briefcase.text-danger
          td class='list-column'
            = link_to :href => url(:clients, :orders, :id => client.id), :class => "btn btn-xs btn-glue"
              | Заказы | 
              = client.orders.size
            / span class="btn btn-xs fa fa-thumbs-o-#{client.orders.size > 0 ? 'up' : 'down'}"
            // span class="btn btn-xs btn-primary" = client.orders.size
          td class='list-column list-row-action'
            div class='list-row-action-wrapper'
              = link_to tag_icon(:edit), :href => url(:clients, :edit, :id => client.id), :rel => :tooltip, :title => "#{pat(:edit)} client", :class => 'list-row-action-wrapper-link'
              = link_to tag_icon("trash-o"), :rel => :tooltip, :title => "#{pat(:delete)} client", :class => 'list-row-action-delete-one list-row-action-wrapper-link'
            div class='modal'
              div class="modal-dialog"
                div class='modal-content'
                  div class="modal-header"
                    h4 class="modal-title" We gonna delete this item
                  div class='modal-body'
                    p Точно удалить?
                  div class='modal-footer'
                    = form_tag url(:clients, :destroy, :id => client.id), :method => :delete do
                      = submit_tag pat(:delete), :class =>'list-row-action-popover-delete-one-btn btn btn-danger btn-wide'
                      div class='btn btn-default btn-wide cancel' data-dismiss="modal" = pat(:cancel)
= paginate if @pages

- content_for :js_assets do
  javascript:
    (function($) {
      $(function() {
  
        var bestPictures = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          // sufficient: 10,
          // limit: 30,
          remote: {
            url: '/orders/clients2',
            replace: function(url, query) {
              return url + "#" + query;
            },
            transport: function (opts, onSuccess, onError) {
              var url = opts.url.split("#")[0];
              var query = opts.url.split("#")[1];
              $.ajax({
                  url: url,
                  data: $.param({
                    q: query,
                    authenticity_token: $("form:first :input[name^='auth']").val()
                  }),
                  type: "POST",
                  success: onSuccess,
                  error: onError
              })
            }
          }
        });
        
        bestPictures.initialize();
        $('#typeahead-client').typeahead({
          minLength: 3
        }, {
          name: 'clients',
          displayKey: 'name',
          source: bestPictures.ttAdapter(),
          limit: Number.MAX_VALUE,
          templates: {
            suggestion: Handlebars.compile('<p><strong>[{{id}}]</strong> {{name}} ({{city}})</p>'),
          }
        }).on('typeahead:selected', function (e, datum) {
          $("#client_link").attr('href', '/clients/edit/' + datum.id);
          $("#client_link")[0].click();
          //console.log(e, datum);
        });
        

        // $.ajax({
        //     type: "POST",
        //     data: "authenticity_token=" + encodeURIComponent($("form:first :input[name^='auth']").val()),
        //     url: "/orders/cities"
        // }).done(function(response) {
        //   var substringMatcher = function(strs) {
        //     return function findMatches(q, cb) {
        //       var matches, substrRegex;
        //       matches = [];
        //       q = q.replace(/[еёЕЁ]/, '[её]');
        //       substrRegex = new RegExp(q, 'i');
              
        //       $.each(strs, function(i, str) {
        //         if (substrRegex.test(str.name))
        //           matches.push({ value: str.name, id: str.id });
        //       });
              
        //       cb(matches);
        //     };
        //   };
          
        //   $('#typeahead-place').typeahead({
        //     hint: true,
        //     highlight: true,
        //     minLength: 2
        //   },
        //   {
        //     name: 'cities',
        //     displayKey: 'value',
        //     source: substringMatcher(response)
            
        //   }).on('typeahead:selected', function (obj, data) {
        //     $("#place_link").attr('href', '/clients?city=' + data.id);
        //     $("#place_link")[0].click();
        //   });
        // });

        DekolFu.init_kato_blood(document, 'typeahead-place')
        $('#typeahead-place').bind('typeahead:select typeahead:autocomplete', function(ev, suggestion) {
          $("#place_link").attr('href', '/clients?city=' + suggestion.id);
          $("#place_link")[0].click();
        })
        
      });
    })(jQuery);