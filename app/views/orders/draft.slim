.tabs-content
  table#list.table.table-hover.table-condensed
    thead
      tr
        th class='header list-menu non-print'
        th class='header' Номер
        th class='header' Город
        th class='header' Куда едет
        th.header width='50px'
        th class='header' Заказчик
        th class='header' Дата
        th class='header non-print'
          = partial 'bricks/orders/section_titles'
        th class='header non-print'
        th class='header list-row-action-header non-print'
    
    tbody
      - abl_view = @sections.map{|s|can_view_section?(:sections, :draft, s.id) ? s.id : nil }
      - kc_os = KSM::OrderStatus.find_all(@orders.map(&:id))
      - @orders.each do |order|
        - os = kc_os.detect{|kc|kc.id.to_i == order.id} || KSM::OrderStatus.new(id: order.id)
        - next if (abl_view & os.pstate.keys).empty?
        tr class='list-row'
          td class='list-column list-selectable non-print' = check_box_tag 'order_ids[]', :autocomplete => "off", :value => order.id, :class => 'list-selectable-checkbox'
          td class='list-column'
            = link_to order.id, :href => url(:orders, :edit, :id => order.id)
          // td class='list-column' = order.name
          td class='list-column'
            - code = @kc_orders[order.id.to_s]
            - town_name = @kc_towns[code]&.model
            = partial 'bricks/kato/label', :locals => { town_name: town_name, el: order }
          td class='list-column'
            - code = @kc_delivery[order.id.to_s] || @kc_client_delivery[order.client_id.to_s]
            - town_name = @kc_towns[code]&.model
            = partial 'bricks/kato/label', :locals => { town_name: town_name, el: order }
          td.list-column.minirur.text-nowrap == deli(rur (order.total/1000.0).floor)
          td class='list-column' = order.client.name
          td class='list-column text-nowrap' = to_msk(order.created_at)
          td class='list-column text-nowrap non-print'
            = partial 'orders/squares', :locals => { :order => order, status: os }
            // - @sections.each do |s|
            //   - s_st = order.order_parts.find_by(:section_id => s.id)
            //   = content_tag :button, !s_st.nil? && s_st.transfer ? "п": "", :class => "btn btn-sm btn-#{s_st.nil? ? 'default' : s_st.state}"
            //   | &nbsp;
            // | &nbsp;
            span.label class="label-#{os.state}" = t :"status.#{os.state}"
          td class='list-column non-print'
            /- if order.finished?
              = link_to "Отправить", :href => url(:orders, :ship, :id => order.id), :class => "btn btn-xs btn-shipped"
            - if order.draft?
              = link_to "Подтвердить", :href => url(:orders, :anew, :id => order.id), :class => "btn btn-xs btn-anew"

          td class='list-column list-row-action non-print'
            div class='list-row-action-wrapper'
              - if current_account.is_admin?
                = link_to tag_icon(:paw), :rel => :tooltip, :title => "Edit order", :href => url(:orders, :correct, :id => order.id), :class => 'list-row-action-wrapper-link'
              - if order.draft? && current_account.is_admin?
                = link_to tag_icon(:save), :href => url(:c1c, :create, :id => order.id), :class => 'list-row-action-wrapper-link'
                = link_to tag_icon("trash-o"), :rel => :tooltip, :title => "#{pat(:delete)} order", :class => 'list-row-action-delete-one list-row-action-wrapper-link'
            div class='modal'
              div class="modal-dialog"
                div class='modal-content'
                  div class="modal-header"
                    h4 class="modal-title" We gonna delete this item
                  div class='modal-body'
                    p Точно удалить?
                  div class='modal-footer'
                    = form_tag url(:orders, :destroy, :id => order.id), :method => :delete do
                      = submit_tag pat(:delete), :class =>'list-row-action-popover-delete-one-btn btn btn-danger btn-wide'
                      div class='btn btn-default btn-wide cancel' data-dismiss="modal" = pat(:cancel)
