- params_sym = params.map{ |k, v| [k.to_sym, v] }.to_h
- show_done_column = params[:date_sel] == 'done'
= form_for :supermodel, url(@r) do |f|
  / = hidden_field_tag :filtred_orders, value: @orders.map(&:id).join('_') if @use_olo
  - [:section, :search, :manager, :town, :client, :delivery, :state, :date_sel, :start_date, :end_date, :pay_type].each do |k|
    = hidden_field_tag "old[#{ k.to_s }]", value: params[k].to_s if params[k]

  - @btn_memory.each do |k, v|
    = hidden_field_tag "btn_memory[#{ k.to_s }]", value: v.to_s if v
  .reports.orders-page
    .non-print
      = partial 'reports/filters', :locals => { :query => params }
    - if @load_orders
      .non-print
        - if @r == url(:reports, :orders) && can_view_any_section?(:sections, :sum)
          - all_ids = @orders.map(&:id)

          .timeline: .summary
            - [:postage, :vernissage, :roundtrip, :pickup].each do |ds|
              - if @deliveries_sum[ds].sum > 0
                .item-orders.pull-left
                  span = t :"delivery.#{ ds.to_s }"
                  .rpr == deli(rur @deliveries_sum[ds][0])
                  .rpr == deli(rur @deliveries_sum[ds][1])

            .pull-left
            - @sections.each do |s|
              - next unless can_view_section?(:sections, :sum, s.ix)
              - sec_sum = @section_sums.fetch(s.ix, 0)
              - sec_sum_fact = @section_sums_fact.fetch(s.ix, 0)
              - if sec_sum > 0
                .item-all.pull-left
                  span = s.name
                  .rpr == deli(rur sec_sum)
                  .rpr == deli(rur sec_sum_fact)

            .item-all.pull-right
              span = "Сумма #{ @orders_count } заказов"
              .rpr == deli(rur @section_sums.map{ |k, v| v }.sum)
              .rpr == deli(rur @section_sums_fact.map{ |k, v| v }.sum)
            - if can_view_stickers?
              - @stickers = CabiePio.all_keys(all_ids, folder: [:sticker, :order]).flat.trans(:to_i, :to_f)
              - @kc_stickers = CabiePio.all_keys(all_ids, folder: [:sticker, :order_progress]).flat.trans(:to_i, :to_f)
              - @kc_sumstickers = @stickers.map{ |k, v| [k, v * @kc_stickers.fetch(k, 0) / 100] }.to_h
              - stickers_done = @kc_sumstickers.values.sum
              - stickers_total = @stickers.values.sum
              .item-sticker.pull-right
                span Клейка
                .rpr == deli(rur stickers_total)
              .item-sticker.pull-right
                span Сделано #{ ((stickers_done.to_f / stickers_total) * 100).ceil rescue 0 }%
                .rpr == deli(rur stickers_done)


    .tabs-content
      table.table.table-hover.table-condensed id='list'
        thead
          tr
            th.list-column.list-selectable.non-print = check_box_tag 'toggle-all', :autocomplete => 'off', :value => 'all', :class => 'toggle-all-checkbox'
            th.header Номер
            th.header

            th.header.text-center
              = partial 'reports/mem_btn', locals: { name: :seq, val: 'created_at', title: 'Сортировка по дате создания', text: 'Соз.' }
              .only-print Соз.

            - if @kc_timelines
              th.header.text-center
                = partial 'reports/mem_btn', locals: { name: :seq, val: 'send', title: 'Сортировка по дате отправки', text: 'Отп.' }
                .only-print Отп.

            - if @kc_done && show_done_column
              th.header.text-center
                = partial 'reports/mem_btn', locals: { name: :seq, val: 'done', title: 'Сортировка по дате сборки', text: 'Соб.' }
                .only-print Соб.

            - if @kc_done && @kc_timelines
              th.header.text-center
                = partial 'reports/mem_btn', locals: { name: :seq, val: 'diff', title: 'Сортировка по разности фактической и ожидаемой отправки', text: 'Разн.' }

            th.header
              = partial 'reports/mem_btn', locals: { name: :seq, val: 'city', title: 'Сортировка по городу', text: 'Город' }
              .only-print Город

            th.header Заказчик
            th.header.text-center Менеджер
            th.header.non-print width='50px'

            th.header.text-center width='10px'
              .non-print.text-nowrap
                = partial 'reports/mem_btn', locals: { name: :pay_type, val: 'f', title: 'Оставить только заказы по карте', fa: 'fa-credit-card', c_list: ['filter-url'] }
                |&nbsp;
                = partial 'reports/mem_btn', locals: { name: :pay_type, val: 't', title: 'Оставить только заказы за наличные', fa: 'fa-money', c_list: ['filter-url'] }
              .only-print.text-center Сумма

            - @sections.each do |s|
              th.header.text-center width='42px'
                = content_tag :span, s.name[0..2]

            th.header.text-center.text-nowrap
              .non-print
                ' Всего:
                rowsummer target='#list'
              .only-print Вып.

        tbody
          - @orders_in_page.each do |order|
            - os = @kc_os.detect{ |kc| kc.id.to_i == order.id } || KSM::OrderStatus.new(id: order.id)
            - if @load_orders
              - sections_sums = @sections_order_sum[order.id]
              - order_sum = sections_sums.map{ |k, v| v[0] }.sum
              - order_sum_f = sections_sums.map{ |k, v| v[1] }.sum
            tr.non-print class="list-row #{ order.priority ? 'warning' : '' }"
              td.list-column.list-selectable.non-print = check_box_tag 'order_ids[]', :autocomplete => 'off', :value => order.id, :class => 'list-selectable-checkbox'

              td.list-column
                - if !order.draft?
                  .non-print = link_to order.id, :href => url(:orders, :edit, :id => order.id)
                  .only-print = order.id
                - else
                  = "#{ order.id }"

              td.list-column
                = tja :delivery, order.delivery
                | &nbsp;&nbsp;

              td.list-column.text-center.text-nowrap
                .cell: .date
                  span = order.created_at.strftime('%d.%m')
                  span.year-num = order.created_at.strftime('.%y')

              / td.list-column.text-center.text-nowrap
              /   .cell: .date
              /     span = order.updated_at.strftime('%d.%m')
              /     span.year-num = order.updated_at.strftime('.%y')
              - odate = @kc_timelines[order.id] if @kc_timelines
              - done_date = @kc_done[order.id] if @kc_done
              - if @kc_timelines
                td.list-column.text-center.text-nowrap class=('date-warning' if @kc_blinks.fetch(order.id, nil))
                  - if odate
                    .cell: .date
                      span = odate.strftime('%d.%m')
                      span.year-num = odate.strftime('.%y')

              - if @kc_done && show_done_column
                td.list-column.text-center.text-nowrap
                  - if done_date
                    .cell: .date
                      span = done_date.strftime('%d.%m')
                      span.year-num = done_date.strftime('.%y')
              - if @kc_timelines && @kc_done
                td.list-column
                  - if done_date && odate
                    - diff = done_date.mjd - odate.mjd
                    .diff.text-center style="color:#{ diff > 0 ? 'darkred' : 'darkgreen' };"
                      = (diff > 0 ? '+' : '') + diff.to_s

              td.list-column
                - code = @kc_orders[order.id.to_s]
                - town_name = @kc_towns[code]&.model
                = partial 'bricks/kato/label_print', :locals => { town_name: town_name, el: order }

              td.list-column = order.client&.name

              td.list-column.text-center
                = order.client&.manager&.name
                - unless order.client&.manager_id
                  .fa.fa-briefcase.text-danger

              td.list-column.non-print
                span.label class="label-#{ os.state }"
                  = t :"status.#{ os.state }"

              td.list-column.minirur.text-nowrap
                  .flex-c.sec-sums.non-print
                    .in-col
                      - if @load_orders
                        .in-row == rur (order_sum / 1000.0).round
                        .in-row == rur (order_sum_f / 1000.0).round
                      - else
                        .in-row == rur (order.total / 1000.0).round
                    |&nbsp;&nbsp;
                    - if @current_account.is_admin?
                    .icash.fa class=(@kc_cash[order.id] == 't' ? 'fa-money' : 'fa-credit-card')
                  .only-print
                    .in-col
                      .in-row = order_sum
                      .in-row = order_sum_f

              - @sections.each do |s|
                - color = os.state(s.ix)
                td.list-column.text-nowrap.text-center
                  button.btn.btn-sm.btn-section.non-print.section-button class=[("btn-#{ color }")]
                    - if @load_orders
                      - cat_sum = (sections_sums[s.ix][0] || 0)
                      - cat_sum_fact = sections_sums[s.ix][1]
                      - if cat_sum_fact != 0 || cat_sum != 0
                        .summ = (cat_sum / 1000.to_f).round
                        .summ = (cat_sum_fact / 1000.to_f).round
                  span.only-print
                    .in-col
                      .in-row = cat_sum
                      .in-row = cat_sum_fact

              td.list-column
                - if @load_orders
                  = "#{ (order_sum_f / order_sum.to_f * 100).round }%" if order_sum > 0

      .non-print
        custom_button.p-r-5 title='Экспорт в CSV' name=:export value=1 clr=1
          .btn.btn-xs.btn-info
            .fa.fa-file
            ' CSV
        custom_button.p-r-5 title='Экспорт в Excel' name=:export_win value=1 clr=1
          .btn.btn-xs.btn-success
            .fa.fa-file
            ' Excel


  = javascript_include_tag :riot, :flexsearch_min
  rscript type="riot/tag" src="/riot/tags/html/multitypedown.tag"
  rscript type="riot/tag" src="/riot/tags/rowsummer.tag"
  rscript type="riot/tag" src="/riot/tags/html/typedown.tag"
  rscript type="riot/tag" src="/riot/tags/html/tdrop.tag"
  rscript type="riot/tag" src="/riot/tags/custom_button.tag"

  javascript:
    document.addEventListener("DOMContentLoaded", function(event) {
      riot.mount('multitypedown, rowsummer, typedown, tdrop, custom_button')
    })

- content_for :js_assets do
  javascript:
    (function($) {
      $(function() {

        $(".toggle-all-checkbox").on("change", function() {
          var list_checkbox = $(".list-selectable-checkbox");
          var checked = $(this).is(':checked');
          list_checkbox.prop('checked', checked);
          list_checkbox.parents(".list-row").toggleClass('non-print', !checked);
        });

        $(".list-selectable-checkbox").on("change", function() {
          $(this).parents(".list-row").toggleClass('non-print');
        });

      });
    })(jQuery);